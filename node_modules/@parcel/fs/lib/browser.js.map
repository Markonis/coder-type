{"mappings":"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","sources":["packages/core/fs/src/index.js","packages/core/fs/src/NodeFS.browser.js","packages/core/fs/src/MemoryFS.js","packages/core/fs/package.json","node_modules/nullthrows/nullthrows.js","packages/core/fs/src/find.js","packages/core/fs/src/OverlayFS.js"],"sourcesContent":["// @flow strict-local\nimport type {FileSystem} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {Readable, Writable} from 'stream';\n\nimport path from 'path';\nimport stream from 'stream';\nimport {promisify} from 'util';\n\nexport type * from './types';\nexport * from './NodeFS';\nexport * from './MemoryFS';\nexport * from './OverlayFS';\n\nconst pipeline: (Readable, Writable) => Promise<void> = promisify(\n  stream.pipeline,\n);\n\n// Recursively copies a directory from the sourceFS to the destinationFS\nexport async function ncp(\n  sourceFS: FileSystem,\n  source: FilePath,\n  destinationFS: FileSystem,\n  destination: FilePath,\n) {\n  await destinationFS.mkdirp(destination);\n  let files = await sourceFS.readdir(source);\n  for (let file of files) {\n    let sourcePath = path.join(source, file);\n    let destPath = path.join(destination, file);\n    let stats = await sourceFS.stat(sourcePath);\n    if (stats.isFile()) {\n      await pipeline(\n        sourceFS.createReadStream(sourcePath),\n        destinationFS.createWriteStream(destPath),\n      );\n    } else if (stats.isDirectory()) {\n      await ncp(sourceFS, sourcePath, destinationFS, destPath);\n    }\n  }\n}\n","// @flow\nimport type {FileSystem} from './types';\n\n// $FlowFixMe[prop-missing] handled by the throwing constructor\nexport class NodeFS implements FileSystem {\n  constructor() {\n    throw new Error(\"NodeFS isn't available in the browser\");\n  }\n}\n","// @flow\n\nimport type {FileSystem, FileOptions, ReaddirOptions, Encoding} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {\n  Event,\n  Options as WatcherOptions,\n  AsyncSubscription,\n} from '@parcel/watcher';\n\nimport path from 'path';\nimport {Readable, Writable} from 'stream';\nimport {registerSerializableClass} from '@parcel/core';\nimport {SharedBuffer} from '@parcel/utils';\nimport packageJSON from '../package.json';\nimport WorkerFarm, {Handle} from '@parcel/workers';\nimport nullthrows from 'nullthrows';\nimport EventEmitter from 'events';\nimport {findAncestorFile, findNodeModule, findFirstFile} from './find';\n\nconst instances: Map<number, MemoryFS> = new Map();\nlet id = 0;\n\ntype HandleFunction = (...args: Array<any>) => any;\ntype SerializedMemoryFS = {\n  id: number,\n  handle: any,\n  dirs: Map<FilePath, Directory>,\n  files: Map<FilePath, File>,\n  symlinks: Map<FilePath, FilePath>,\n  ...\n};\n\ntype WorkerEvent = {|\n  type: 'writeFile' | 'unlink' | 'mkdir' | 'symlink',\n  path: FilePath,\n  entry?: Entry,\n  target?: FilePath,\n|};\n\ntype ResolveFunction = () => mixed;\n\nexport class MemoryFS implements FileSystem {\n  dirs: Map<FilePath, Directory>;\n  files: Map<FilePath, File>;\n  symlinks: Map<FilePath, FilePath>;\n  watchers: Map<FilePath, Set<Watcher>>;\n  events: Array<Event>;\n  id: number;\n  handle: Handle;\n  farm: WorkerFarm;\n  _cwd: FilePath;\n  _eventQueue: Array<Event>;\n  _watcherTimer: TimeoutID;\n  _numWorkerInstances: number = 0;\n  _workerHandles: Array<Handle>;\n  _workerRegisterResolves: Array<ResolveFunction> = [];\n  _emitter: EventEmitter = new EventEmitter();\n\n  constructor(workerFarm: WorkerFarm) {\n    this.farm = workerFarm;\n    this.dirs = new Map([['/', new Directory()]]);\n    this.files = new Map();\n    this.symlinks = new Map();\n    this.watchers = new Map();\n    this.events = [];\n    this.id = id++;\n    this._cwd = '/';\n    this._workerHandles = [];\n    this._eventQueue = [];\n    instances.set(this.id, this);\n    this._emitter.on('allWorkersRegistered', () => {\n      for (let resolve of this._workerRegisterResolves) {\n        resolve();\n      }\n      this._workerRegisterResolves = [];\n    });\n  }\n\n  static deserialize(opts: SerializedMemoryFS): MemoryFS | WorkerFS {\n    let existing = instances.get(opts.id);\n    if (existing != null) {\n      // Correct the count of worker instances since serialization assumes a new instance is created\n      WorkerFarm.getWorkerApi().runHandle(opts.handle, [\n        'decrementWorkerInstance',\n        [],\n      ]);\n      return existing;\n    }\n\n    let fs = new WorkerFS(opts.id, nullthrows(opts.handle));\n    fs.dirs = opts.dirs;\n    fs.files = opts.files;\n    fs.symlinks = opts.symlinks;\n    return fs;\n  }\n\n  serialize(): SerializedMemoryFS {\n    if (!this.handle) {\n      this.handle = this.farm.createReverseHandle(\n        (fn: string, args: Array<mixed>) => {\n          // $FlowFixMe\n          return this[fn](...args);\n        },\n      );\n    }\n\n    // If a worker instance already exists, it will decrement this number\n    this._numWorkerInstances++;\n\n    return {\n      $$raw: false,\n      id: this.id,\n      handle: this.handle,\n      dirs: this.dirs,\n      files: this.files,\n      symlinks: this.symlinks,\n    };\n  }\n\n  decrementWorkerInstance() {\n    this._numWorkerInstances--;\n    if (this._numWorkerInstances === this._workerHandles.length) {\n      this._emitter.emit('allWorkersRegistered');\n    }\n  }\n\n  cwd(): FilePath {\n    return this._cwd;\n  }\n\n  chdir(dir: FilePath) {\n    this._cwd = dir;\n  }\n\n  _normalizePath(filePath: FilePath, realpath: boolean = true): FilePath {\n    filePath = path.resolve(this.cwd(), filePath);\n\n    // get realpath by following symlinks\n    if (realpath) {\n      let {root, dir, base} = path.parse(filePath);\n      let parts = dir.slice(root.length).split(path.sep).concat(base);\n      let res = root;\n      for (let part of parts) {\n        res = path.join(res, part);\n        let symlink = this.symlinks.get(res);\n        if (symlink) {\n          res = symlink;\n        }\n      }\n\n      return res;\n    }\n\n    return filePath;\n  }\n\n  async writeFile(\n    filePath: FilePath,\n    contents: Buffer | string,\n    options?: ?FileOptions,\n  ) {\n    filePath = this._normalizePath(filePath);\n    if (this.dirs.has(filePath)) {\n      throw new FSError('EISDIR', filePath, 'is a directory');\n    }\n\n    let dir = path.dirname(filePath);\n    if (!this.dirs.has(dir)) {\n      throw new FSError('ENOENT', dir, 'does not exist');\n    }\n\n    let buffer = makeShared(contents);\n    let file = this.files.get(filePath);\n    let mode = (options && options.mode) || 0o666;\n    if (file) {\n      file.write(buffer, mode);\n      this.files.set(filePath, file);\n    } else {\n      this.files.set(filePath, new File(buffer, mode));\n    }\n\n    await this._sendWorkerEvent({\n      type: 'writeFile',\n      path: filePath,\n      entry: this.files.get(filePath),\n    });\n\n    this._triggerEvent({\n      type: file ? 'update' : 'create',\n      path: filePath,\n    });\n  }\n\n  // eslint-disable-next-line require-await\n  async readFile(filePath: FilePath, encoding?: Encoding): Promise<any> {\n    return this.readFileSync(filePath, encoding);\n  }\n\n  readFileSync(filePath: FilePath, encoding?: Encoding): any {\n    filePath = this._normalizePath(filePath);\n    let file = this.files.get(filePath);\n    if (file == null) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    let buffer = file.read();\n    if (encoding) {\n      return buffer.toString(encoding);\n    }\n\n    return buffer;\n  }\n\n  async copyFile(source: FilePath, destination: FilePath) {\n    let contents = await this.readFile(source);\n    await this.writeFile(destination, contents);\n  }\n\n  statSync(filePath: FilePath): Stat {\n    filePath = this._normalizePath(filePath);\n\n    let dir = this.dirs.get(filePath);\n    if (dir) {\n      return dir.stat();\n    }\n\n    let file = this.files.get(filePath);\n    if (file == null) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    return file.stat();\n  }\n\n  // eslint-disable-next-line require-await\n  async stat(filePath: FilePath): Promise<Stat> {\n    return this.statSync(filePath);\n  }\n\n  readdirSync(dir: FilePath, opts?: ReaddirOptions): any {\n    dir = this._normalizePath(dir);\n    if (!this.dirs.has(dir)) {\n      throw new FSError('ENOENT', dir, 'does not exist');\n    }\n\n    dir += path.sep;\n\n    let res = [];\n    for (let [filePath, entry] of this.dirs) {\n      if (\n        filePath.startsWith(dir) &&\n        filePath.indexOf(path.sep, dir.length) === -1\n      ) {\n        let name = filePath.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, entry));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    for (let [filePath, entry] of this.files) {\n      if (\n        filePath.startsWith(dir) &&\n        filePath.indexOf(path.sep, dir.length) === -1\n      ) {\n        let name = filePath.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, entry));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    for (let [from] of this.symlinks) {\n      if (from.startsWith(dir) && from.indexOf(path.sep, dir.length) === -1) {\n        let name = from.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, {mode: S_IFLNK}));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  // eslint-disable-next-line require-await\n  async readdir(dir: FilePath, opts?: ReaddirOptions): Promise<any> {\n    return this.readdirSync(dir, opts);\n  }\n\n  async unlink(filePath: FilePath): Promise<void> {\n    filePath = this._normalizePath(filePath);\n    if (!this.files.has(filePath) && !this.dirs.has(filePath)) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    this.files.delete(filePath);\n    this.dirs.delete(filePath);\n    this.watchers.delete(filePath);\n\n    await this._sendWorkerEvent({\n      type: 'unlink',\n      path: filePath,\n    });\n\n    this._triggerEvent({\n      type: 'delete',\n      path: filePath,\n    });\n\n    return Promise.resolve();\n  }\n\n  async mkdirp(dir: FilePath): Promise<void> {\n    dir = this._normalizePath(dir);\n    if (this.dirs.has(dir)) {\n      return Promise.resolve();\n    }\n\n    if (this.files.has(dir)) {\n      throw new FSError('ENOENT', dir, 'is not a directory');\n    }\n\n    let root = path.parse(dir).root;\n    while (dir !== root) {\n      if (this.dirs.has(dir)) {\n        break;\n      }\n\n      this.dirs.set(dir, new Directory());\n      await this._sendWorkerEvent({\n        type: 'mkdir',\n        path: dir,\n      });\n\n      this._triggerEvent({\n        type: 'create',\n        path: dir,\n      });\n\n      dir = path.dirname(dir);\n    }\n\n    return Promise.resolve();\n  }\n\n  async rimraf(filePath: FilePath): Promise<void> {\n    filePath = this._normalizePath(filePath);\n\n    if (this.dirs.has(filePath)) {\n      let dir = filePath + path.sep;\n      for (let filePath of this.files.keys()) {\n        if (filePath.startsWith(dir)) {\n          this.files.delete(filePath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n\n          this._triggerEvent({\n            type: 'delete',\n            path: filePath,\n          });\n        }\n      }\n\n      for (let dirPath of this.dirs.keys()) {\n        if (dirPath.startsWith(dir)) {\n          this.dirs.delete(dirPath);\n          this.watchers.delete(dirPath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n\n          this._triggerEvent({\n            type: 'delete',\n            path: dirPath,\n          });\n        }\n      }\n\n      for (let filePath of this.symlinks.keys()) {\n        if (filePath.startsWith(dir)) {\n          this.symlinks.delete(filePath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n        }\n      }\n\n      this.dirs.delete(filePath);\n      await this._sendWorkerEvent({\n        type: 'unlink',\n        path: filePath,\n      });\n\n      this._triggerEvent({\n        type: 'delete',\n        path: filePath,\n      });\n    } else if (this.files.has(filePath)) {\n      this.files.delete(filePath);\n      await this._sendWorkerEvent({\n        type: 'unlink',\n        path: filePath,\n      });\n\n      this._triggerEvent({\n        type: 'delete',\n        path: filePath,\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  async ncp(source: FilePath, destination: FilePath) {\n    source = this._normalizePath(source);\n\n    if (this.dirs.has(source)) {\n      if (!this.dirs.has(destination)) {\n        this.dirs.set(destination, new Directory());\n        await this._sendWorkerEvent({\n          type: 'mkdir',\n          path: destination,\n        });\n\n        this._triggerEvent({\n          type: 'create',\n          path: destination,\n        });\n      }\n\n      let dir = source + path.sep;\n      for (let dirPath of this.dirs.keys()) {\n        if (dirPath.startsWith(dir)) {\n          let destName = path.join(destination, dirPath.slice(dir.length));\n          if (!this.dirs.has(destName)) {\n            this.dirs.set(destName, new Directory());\n            await this._sendWorkerEvent({\n              type: 'mkdir',\n              path: destination,\n            });\n            this._triggerEvent({\n              type: 'create',\n              path: destName,\n            });\n          }\n        }\n      }\n\n      for (let [filePath, file] of this.files) {\n        if (filePath.startsWith(dir)) {\n          let destName = path.join(destination, filePath.slice(dir.length));\n          let exists = this.files.has(destName);\n          this.files.set(destName, file);\n          await this._sendWorkerEvent({\n            type: 'writeFile',\n            path: destName,\n            entry: file,\n          });\n\n          this._triggerEvent({\n            type: exists ? 'update' : 'create',\n            path: destName,\n          });\n        }\n      }\n    } else {\n      await this.copyFile(source, destination);\n    }\n  }\n\n  createReadStream(filePath: FilePath): ReadStream {\n    return new ReadStream(this, filePath);\n  }\n\n  createWriteStream(filePath: FilePath, options: ?FileOptions): WriteStream {\n    return new WriteStream(this, filePath, options);\n  }\n\n  realpathSync(filePath: FilePath): FilePath {\n    return this._normalizePath(filePath);\n  }\n\n  // eslint-disable-next-line require-await\n  async realpath(filePath: FilePath): Promise<FilePath> {\n    return this.realpathSync(filePath);\n  }\n\n  async symlink(target: FilePath, path: FilePath) {\n    target = this._normalizePath(target);\n    path = this._normalizePath(path);\n    this.symlinks.set(path, target);\n    await this._sendWorkerEvent({\n      type: 'symlink',\n      path,\n      target,\n    });\n  }\n\n  existsSync(filePath: FilePath): boolean {\n    filePath = this._normalizePath(filePath);\n    return this.files.has(filePath) || this.dirs.has(filePath);\n  }\n\n  // eslint-disable-next-line require-await\n  async exists(filePath: FilePath): Promise<boolean> {\n    return this.existsSync(filePath);\n  }\n\n  _triggerEvent(event: Event) {\n    this.events.push(event);\n    if (this.watchers.size === 0) {\n      return;\n    }\n\n    // Batch events\n    this._eventQueue.push(event);\n    clearTimeout(this._watcherTimer);\n\n    this._watcherTimer = setTimeout(() => {\n      let events = this._eventQueue;\n      this._eventQueue = [];\n\n      for (let [dir, watchers] of this.watchers) {\n        if (!dir.endsWith(path.sep)) {\n          dir += path.sep;\n        }\n\n        if (event.path.startsWith(dir)) {\n          for (let watcher of watchers) {\n            watcher.trigger(events);\n          }\n        }\n      }\n    }, 50);\n  }\n\n  _registerWorker(handle: Handle) {\n    this._workerHandles.push(handle);\n    if (this._numWorkerInstances === this._workerHandles.length) {\n      this._emitter.emit('allWorkersRegistered');\n    }\n  }\n\n  async _sendWorkerEvent(event: WorkerEvent) {\n    // Wait for worker instances to register their handles\n    while (this._workerHandles.length < this._numWorkerInstances) {\n      await new Promise(resolve => this._workerRegisterResolves.push(resolve));\n    }\n\n    await Promise.all(\n      this._workerHandles.map(workerHandle =>\n        this.farm.workerApi.runHandle(workerHandle, [event]),\n      ),\n    );\n  }\n\n  watch(\n    dir: FilePath,\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    opts: WatcherOptions,\n  ): Promise<AsyncSubscription> {\n    dir = this._normalizePath(dir);\n    let watcher = new Watcher(fn, opts);\n    let watchers = this.watchers.get(dir);\n    if (!watchers) {\n      watchers = new Set();\n      this.watchers.set(dir, watchers);\n    }\n\n    watchers.add(watcher);\n\n    return Promise.resolve({\n      unsubscribe: () => {\n        watchers = nullthrows(watchers);\n        watchers.delete(watcher);\n\n        if (watchers.size === 0) {\n          this.watchers.delete(dir);\n        }\n\n        return Promise.resolve();\n      },\n    });\n  }\n\n  async getEventsSince(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<Array<Event>> {\n    let contents = await this.readFile(snapshot, 'utf8');\n    let len = Number(contents);\n    let events = this.events.slice(len);\n    let ignore = opts.ignore;\n    if (ignore) {\n      events = events.filter(\n        event => !ignore.some(i => event.path.startsWith(i + path.sep)),\n      );\n    }\n\n    return events;\n  }\n\n  async writeSnapshot(dir: FilePath, snapshot: FilePath): Promise<void> {\n    await this.writeFile(snapshot, '' + this.events.length);\n  }\n\n  findAncestorFile(\n    fileNames: Array<string>,\n    fromDir: FilePath,\n    root: FilePath,\n  ): ?FilePath {\n    return findAncestorFile(this, fileNames, fromDir, root);\n  }\n\n  findNodeModule(moduleName: string, fromDir: FilePath): ?FilePath {\n    return findNodeModule(this, moduleName, fromDir);\n  }\n\n  findFirstFile(filePaths: Array<FilePath>): ?FilePath {\n    return findFirstFile(this, filePaths);\n  }\n}\n\nclass Watcher {\n  fn: (err: ?Error, events: Array<Event>) => mixed;\n  options: WatcherOptions;\n\n  constructor(\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    options: WatcherOptions,\n  ) {\n    this.fn = fn;\n    this.options = options;\n  }\n\n  trigger(events: Array<Event>) {\n    let ignore = this.options.ignore;\n    if (ignore) {\n      events = events.filter(\n        event => !ignore.some(i => event.path.startsWith(i + path.sep)),\n      );\n    }\n\n    if (events.length > 0) {\n      this.fn(null, events);\n    }\n  }\n}\n\nclass FSError extends Error {\n  code: string;\n  path: FilePath;\n  constructor(code: string, path: FilePath, message: string) {\n    super(`${code}: ${path} ${message}`);\n    this.name = 'FSError';\n    this.code = code;\n    this.path = path;\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\n\nclass ReadStream extends Readable {\n  fs: FileSystem;\n  filePath: FilePath;\n  reading: boolean;\n  bytesRead: number;\n  constructor(fs: FileSystem, filePath: FilePath) {\n    super();\n    this.fs = fs;\n    this.filePath = filePath;\n    this.reading = false;\n    this.bytesRead = 0;\n  }\n\n  _read() {\n    if (this.reading) {\n      return;\n    }\n\n    this.reading = true;\n    this.fs.readFile(this.filePath).then(\n      res => {\n        this.bytesRead += res.byteLength;\n        this.push(res);\n        this.push(null);\n      },\n      err => {\n        this.emit('error', err);\n      },\n    );\n  }\n}\n\nclass WriteStream extends Writable {\n  fs: FileSystem;\n  filePath: FilePath;\n  options: ?FileOptions;\n  buffer: Buffer;\n\n  constructor(fs: FileSystem, filePath: FilePath, options: ?FileOptions) {\n    super({emitClose: true, autoDestroy: true});\n    this.fs = fs;\n    this.filePath = filePath;\n    this.options = options;\n    this.buffer = Buffer.alloc(0);\n  }\n\n  _write(\n    chunk: Buffer | string,\n    encoding: any,\n    callback: (error?: Error) => void,\n  ) {\n    let c = typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk;\n    this.buffer = Buffer.concat([this.buffer, c]);\n    callback();\n  }\n\n  _final(callback: (error?: Error) => void) {\n    this.fs\n      .writeFile(this.filePath, this.buffer, this.options)\n      .then(callback)\n      .catch(callback);\n  }\n}\n\nconst S_IFREG = 0o100000;\nconst S_IFDIR = 0o040000;\nconst S_IFLNK = 0o120000;\n\nclass Entry {\n  mode: number;\n  atime: number;\n  mtime: number;\n  ctime: number;\n  birthtime: number;\n  constructor(mode: number) {\n    this.mode = mode;\n    let now = Date.now();\n    this.atime = now;\n    this.mtime = now;\n    this.ctime = now;\n    this.birthtime = now;\n  }\n\n  access() {\n    let now = Date.now();\n    this.atime = now;\n    this.ctime = now;\n  }\n\n  modify(mode: number) {\n    let now = Date.now();\n    this.mtime = now;\n    this.ctime = now;\n    this.mode = mode;\n  }\n\n  getSize(): number {\n    return 0;\n  }\n\n  stat(): Stat {\n    return new Stat(this);\n  }\n}\n\nclass Stat {\n  dev: number = 0;\n  ino: number = 0;\n  mode: number;\n  nlink: number = 0;\n  uid: number = 0;\n  gid: number = 0;\n  rdev: number = 0;\n  size: number;\n  blksize: number = 0;\n  blocks: number = 0;\n  atimeMs: number;\n  mtimeMs: number;\n  ctimeMs: number;\n  birthtimeMs: number;\n  atime: Date;\n  mtime: Date;\n  ctime: Date;\n  birthtime: Date;\n\n  constructor(entry: Entry) {\n    this.mode = entry.mode;\n    this.size = entry.getSize();\n    this.atimeMs = entry.atime;\n    this.mtimeMs = entry.mtime;\n    this.ctimeMs = entry.ctime;\n    this.birthtimeMs = entry.birthtime;\n    this.atime = new Date(entry.atime);\n    this.mtime = new Date(entry.mtime);\n    this.ctime = new Date(entry.ctime);\n    this.birthtime = new Date(entry.birthtime);\n  }\n\n  isFile(): boolean {\n    return Boolean(this.mode & S_IFREG);\n  }\n\n  isDirectory(): boolean {\n    return Boolean(this.mode & S_IFDIR);\n  }\n\n  isBlockDevice(): boolean {\n    return false;\n  }\n\n  isCharacterDevice(): boolean {\n    return false;\n  }\n\n  isSymbolicLink(): boolean {\n    return false;\n  }\n\n  isFIFO(): boolean {\n    return false;\n  }\n\n  isSocket(): boolean {\n    return false;\n  }\n}\n\nclass Dirent {\n  name: string;\n  #mode: number;\n\n  constructor(name: string, entry: interface {mode: number}) {\n    this.name = name;\n    this.#mode = entry.mode;\n  }\n\n  isFile(): boolean {\n    return Boolean(this.#mode & S_IFREG);\n  }\n\n  isDirectory(): boolean {\n    return Boolean(this.#mode & S_IFDIR);\n  }\n\n  isBlockDevice(): boolean {\n    return false;\n  }\n\n  isCharacterDevice(): boolean {\n    return false;\n  }\n\n  isSymbolicLink(): boolean {\n    return Boolean(this.#mode & S_IFLNK);\n  }\n\n  isFIFO(): boolean {\n    return false;\n  }\n\n  isSocket(): boolean {\n    return false;\n  }\n}\n\nclass File extends Entry {\n  buffer: Buffer;\n  constructor(buffer: Buffer, mode: number) {\n    super(S_IFREG | mode);\n    this.buffer = buffer;\n  }\n\n  read(): Buffer {\n    super.access();\n    return Buffer.from(this.buffer);\n  }\n\n  write(buffer: Buffer, mode: number) {\n    super.modify(S_IFREG | mode);\n    this.buffer = buffer;\n  }\n\n  getSize(): number {\n    return this.buffer.byteLength;\n  }\n}\n\nclass Directory extends Entry {\n  constructor() {\n    super(S_IFDIR);\n  }\n}\n\nfunction makeShared(contents: Buffer | string): Buffer {\n  if (typeof contents !== 'string' && contents.buffer instanceof SharedBuffer) {\n    return contents;\n  }\n\n  let length = Buffer.byteLength(contents);\n  let shared = new SharedBuffer(length);\n  let buffer = Buffer.from(shared);\n  if (typeof contents === 'string') {\n    buffer.write(contents);\n  } else {\n    buffer.set(contents);\n  }\n\n  return buffer;\n}\n\nclass WorkerFS extends MemoryFS {\n  id: number;\n  handleFn: HandleFunction;\n\n  constructor(id: number, handle: Handle) {\n    // TODO Make this not a subclass\n    // $FlowFixMe\n    super();\n    this.id = id;\n    this.handleFn = (methodName, args) =>\n      WorkerFarm.getWorkerApi().runHandle(handle, [methodName, args]);\n\n    this.handleFn('_registerWorker', [\n      WorkerFarm.getWorkerApi().createReverseHandle(event => {\n        switch (event.type) {\n          case 'writeFile':\n            this.files.set(event.path, event.entry);\n            break;\n          case 'unlink':\n            this.files.delete(event.path);\n            this.dirs.delete(event.path);\n            this.symlinks.delete(event.path);\n            break;\n          case 'mkdir':\n            this.dirs.set(event.path, new Directory());\n            break;\n          case 'symlink':\n            this.symlinks.set(event.path, event.target);\n            break;\n        }\n      }),\n    ]);\n  }\n\n  static deserialize(opts: SerializedMemoryFS): MemoryFS {\n    return nullthrows(instances.get(opts.id));\n  }\n\n  serialize(): SerializedMemoryFS {\n    // $FlowFixMe\n    return {\n      id: this.id,\n    };\n  }\n\n  writeFile(\n    filePath: FilePath,\n    contents: Buffer | string,\n    options: ?FileOptions,\n  ): Promise<void> {\n    super.writeFile(filePath, contents, options);\n    let buffer = makeShared(contents);\n    return this.handleFn('writeFile', [filePath, buffer, options]);\n  }\n\n  unlink(filePath: FilePath): Promise<void> {\n    super.unlink(filePath);\n    return this.handleFn('unlink', [filePath]);\n  }\n\n  mkdirp(dir: FilePath): Promise<void> {\n    super.mkdirp(dir);\n    return this.handleFn('mkdirp', [dir]);\n  }\n\n  rimraf(filePath: FilePath): Promise<void> {\n    super.rimraf(filePath);\n    return this.handleFn('rimraf', [filePath]);\n  }\n\n  ncp(source: FilePath, destination: FilePath): Promise<void> {\n    super.ncp(source, destination);\n    return this.handleFn('ncp', [source, destination]);\n  }\n\n  symlink(target: FilePath, path: FilePath): Promise<void> {\n    super.symlink(target, path);\n    return this.handleFn('symlink', [target, path]);\n  }\n}\n\nregisterSerializableClass(`${packageJSON.version}:MemoryFS`, MemoryFS);\nregisterSerializableClass(`${packageJSON.version}:WorkerFS`, WorkerFS);\nregisterSerializableClass(`${packageJSON.version}:Stat`, Stat);\nregisterSerializableClass(`${packageJSON.version}:File`, File);\nregisterSerializableClass(`${packageJSON.version}:Directory`, Directory);\n","{\n  \"name\": \"@parcel/fs\",\n  \"version\": \"2.8.3\",\n  \"description\": \"Blazing fast, zero configuration web application bundler\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/parcel\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/parcel-bundler/parcel.git\"\n  },\n  \"main\": \"lib/index.js\",\n  \"source\": \"src/index.js\",\n  \"types\": \"index.d.ts\",\n  \"engines\": {\n    \"node\": \">= 12.0.0\"\n  },\n  \"targets\": {\n    \"types\": false,\n    \"main\": {\n      \"includeNodeModules\": {\n        \"@parcel/core\": false,\n        \"@parcel/fs-search\": false,\n        \"@parcel/types\": false,\n        \"@parcel/utils\": false,\n        \"@parcel/watcher\": false,\n        \"@parcel/workers\": false\n      }\n    },\n    \"browser\": {\n      \"includeNodeModules\": {\n        \"@parcel/core\": false,\n        \"@parcel/fs-search\": false,\n        \"@parcel/types\": false,\n        \"@parcel/utils\": false,\n        \"@parcel/watcher\": false,\n        \"@parcel/workers\": false\n      }\n    }\n  },\n  \"scripts\": {\n    \"build-ts\": \"mkdir -p lib && flow-to-ts src/types.js > lib/types.d.ts\",\n    \"check-ts\": \"tsc --noEmit index.d.ts\"\n  },\n  \"dependencies\": {\n    \"@parcel/fs-search\": \"2.8.3\",\n    \"@parcel/types\": \"2.8.3\",\n    \"@parcel/utils\": \"2.8.3\",\n    \"@parcel/watcher\": \"^2.0.7\",\n    \"@parcel/workers\": \"2.8.3\"\n  },\n  \"devDependencies\": {\n    \"graceful-fs\": \"^4.2.4\",\n    \"ncp\": \"^2.0.0\",\n    \"nullthrows\": \"^1.1.1\",\n    \"utility-types\": \"^3.10.0\"\n  },\n  \"peerDependencies\": {\n    \"@parcel/core\": \"^2.8.3\"\n  },\n  \"browser\": {\n    \"@parcel/fs\": \"./lib/browser.js\",\n    \"./src/NodeFS.js\": \"./src/NodeFS.browser.js\"\n  },\n  \"gitHead\": \"349a6caf40ec8abb6a49fcae0765f8f8deb2073d\"\n}\n","'use strict';\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n  var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);\n  error.framesToPop = 1; // Skip nullthrows's own stack frame.\n  throw error;\n}\n\nmodule.exports = nullthrows;\nmodule.exports.default = nullthrows;\n\nObject.defineProperty(module.exports, '__esModule', {value: true});\n","// @flow\nimport type {FilePath} from '@parcel/types';\nimport type {FileSystem} from './types';\nimport path from 'path';\n\nexport function findNodeModule(\n  fs: FileSystem,\n  moduleName: string,\n  dir: FilePath,\n): ?FilePath {\n  let {root} = path.parse(dir);\n  while (dir !== root) {\n    // Skip node_modules directories\n    if (path.basename(dir) === 'node_modules') {\n      dir = path.dirname(dir);\n    }\n\n    try {\n      let moduleDir = path.join(dir, 'node_modules', moduleName);\n      let stats = fs.statSync(moduleDir);\n      if (stats.isDirectory()) {\n        return moduleDir;\n      }\n    } catch (err) {\n      // ignore\n    }\n\n    // Move up a directory\n    dir = path.dirname(dir);\n  }\n\n  return null;\n}\n\nexport function findAncestorFile(\n  fs: FileSystem,\n  fileNames: Array<string>,\n  dir: FilePath,\n  root: FilePath,\n): ?FilePath {\n  let {root: pathRoot} = path.parse(dir);\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (path.basename(dir) === 'node_modules') {\n      return null;\n    }\n\n    for (const fileName of fileNames) {\n      let filePath = path.join(dir, fileName);\n      try {\n        if (fs.statSync(filePath).isFile()) {\n          return filePath;\n        }\n      } catch (err) {\n        // ignore\n      }\n    }\n\n    if (dir === root || dir === pathRoot) {\n      break;\n    }\n\n    dir = path.dirname(dir);\n  }\n\n  return null;\n}\n\nexport function findFirstFile(\n  fs: FileSystem,\n  filePaths: Array<FilePath>,\n): ?FilePath {\n  for (let filePath of filePaths) {\n    try {\n      if (fs.statSync(filePath).isFile()) {\n        return filePath;\n      }\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n","// @flow\n\nimport type {Stats} from 'fs';\nimport type {FileSystem, ReaddirOptions} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {\n  Event,\n  Options as WatcherOptions,\n  AsyncSubscription,\n} from '@parcel/watcher';\n\nimport {registerSerializableClass} from '@parcel/core';\nimport packageJSON from '../package.json';\nimport {findAncestorFile, findNodeModule, findFirstFile} from './find';\n\nfunction read(method) {\n  return async function (...args: Array<any>) {\n    try {\n      return await this.writable[method](...args);\n    } catch (err) {\n      return this.readable[method](...args);\n    }\n  };\n}\n\nfunction readSync(method) {\n  return function (...args: Array<any>) {\n    try {\n      return this.writable[method](...args);\n    } catch (err) {\n      return this.readable[method](...args);\n    }\n  };\n}\n\nfunction write(method) {\n  return function (...args: Array<any>) {\n    return this.writable[method](...args);\n  };\n}\n\nfunction checkExists(method) {\n  return function (filePath: FilePath, ...args: Array<any>) {\n    if (this.writable.existsSync(filePath)) {\n      return this.writable[method](filePath, ...args);\n    }\n\n    return this.readable[method](filePath, ...args);\n  };\n}\n\nexport class OverlayFS implements FileSystem {\n  writable: FileSystem;\n  readable: FileSystem;\n  constructor(writable: FileSystem, readable: FileSystem) {\n    this.writable = writable;\n    this.readable = readable;\n  }\n\n  static deserialize(opts: any): OverlayFS {\n    return new OverlayFS(opts.writable, opts.readable);\n  }\n\n  serialize(): {|$$raw: boolean, readable: FileSystem, writable: FileSystem|} {\n    return {\n      $$raw: false,\n      writable: this.writable,\n      readable: this.readable,\n    };\n  }\n\n  readFile: (...args: Array<any>) => Promise<Buffer & string & $Shape<Stats>> =\n    read('readFile');\n  writeFile: (...args: Array<any>) => any = write('writeFile');\n  async copyFile(source: FilePath, destination: FilePath) {\n    if (await this.writable.exists(source)) {\n      await this.writable.writeFile(\n        destination,\n        await this.writable.readFile(source),\n      );\n    } else {\n      await this.writable.writeFile(\n        destination,\n        await this.readable.readFile(source),\n      );\n    }\n  }\n  stat: (...args: Array<any>) => Promise<Buffer & string & $Shape<Stats>> =\n    read('stat');\n  unlink: (...args: Array<any>) => any = write('unlink');\n  mkdirp: (...args: Array<any>) => any = write('mkdirp');\n  rimraf: (...args: Array<any>) => any = write('rimraf');\n  ncp: (...args: Array<any>) => any = write('ncp');\n  createReadStream: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('createReadStream');\n  createWriteStream: (...args: Array<any>) => any = write('createWriteStream');\n  cwd: (...args: Array<any>) => any = readSync('cwd');\n  chdir: (...args: Array<any>) => any = readSync('chdir');\n  realpath: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('realpath');\n\n  readFileSync: (...args: Array<any>) => any = readSync('readFileSync');\n  statSync: (...args: Array<any>) => any = readSync('statSync');\n  existsSync: (...args: Array<any>) => any = readSync('existsSync');\n  realpathSync: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('realpathSync');\n\n  async exists(filePath: FilePath): Promise<boolean> {\n    return (\n      (await this.writable.exists(filePath)) || this.readable.exists(filePath)\n    );\n  }\n\n  async readdir(path: FilePath, opts?: ReaddirOptions): Promise<any> {\n    // Read from both filesystems and merge the results\n    let writable = [];\n    let readable = [];\n    try {\n      writable = await this.writable.readdir(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    try {\n      readable = await this.readable.readdir(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    return Array.from(new Set([...writable, ...readable]));\n  }\n\n  readdirSync(path: FilePath, opts?: ReaddirOptions): any {\n    // Read from both filesystems and merge the results\n    let writable = [];\n    let readable = [];\n    try {\n      writable = this.writable.readdirSync(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    try {\n      readable = this.readable.readdirSync(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    return Array.from(new Set([...writable, ...readable]));\n  }\n\n  async watch(\n    dir: FilePath,\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    opts: WatcherOptions,\n  ): Promise<AsyncSubscription> {\n    let writableSubscription = await this.writable.watch(dir, fn, opts);\n    let readableSubscription = await this.readable.watch(dir, fn, opts);\n    return {\n      unsubscribe: async () => {\n        await writableSubscription.unsubscribe();\n        await readableSubscription.unsubscribe();\n      },\n    };\n  }\n\n  async getEventsSince(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<Array<Event>> {\n    let writableEvents = await this.writable.getEventsSince(\n      dir,\n      snapshot,\n      opts,\n    );\n    let readableEvents = await this.readable.getEventsSince(\n      dir,\n      snapshot,\n      opts,\n    );\n    return [...writableEvents, ...readableEvents];\n  }\n\n  async writeSnapshot(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<void> {\n    await this.writable.writeSnapshot(dir, snapshot, opts);\n  }\n\n  findAncestorFile(\n    fileNames: Array<string>,\n    fromDir: FilePath,\n    root: FilePath,\n  ): ?FilePath {\n    return findAncestorFile(this, fileNames, fromDir, root);\n  }\n\n  findNodeModule(moduleName: string, fromDir: FilePath): ?FilePath {\n    return findNodeModule(this, moduleName, fromDir);\n  }\n\n  findFirstFile(filePaths: Array<FilePath>): ?FilePath {\n    return findFirstFile(this, filePaths);\n  }\n}\n\nregisterSerializableClass(`${packageJSON.version}:OverlayFS`, OverlayFS);\n"],"names":["path","stream","promisify","pipeline","ncp","sourceFS","source","destinationFS","destination","mkdirp","files","readdir","file","sourcePath","join","destPath","stats","stat","isFile","createReadStream","createWriteStream","isDirectory","NodeFS","constructor","Error","Readable","Writable","registerSerializableClass","SharedBuffer","packageJSON","WorkerFarm","Handle","nullthrows","EventEmitter","findAncestorFile","findNodeModule","findFirstFile","instances","Map","id","MemoryFS","_numWorkerInstances","_workerRegisterResolves","_emitter","workerFarm","farm","dirs","Directory","symlinks","watchers","events","_cwd","_workerHandles","_eventQueue","set","on","resolve","deserialize","opts","existing","get","getWorkerApi","runHandle","handle","fs","WorkerFS","serialize","createReverseHandle","fn","args","$$raw","decrementWorkerInstance","length","emit","cwd","chdir","dir","_normalizePath","filePath","realpath","root","base","parse","parts","slice","split","sep","concat","res","part","symlink","writeFile","contents","options","has","FSError","dirname","buffer","makeShared","mode","write","File","_sendWorkerEvent","type","entry","_triggerEvent","readFile","encoding","readFileSync","read","toString","copyFile","statSync","readdirSync","startsWith","indexOf","name","withFileTypes","push","Dirent","from","S_IFLNK","unlink","delete","Promise","rimraf","keys","dirPath","destName","exists","ReadStream","WriteStream","realpathSync","target","existsSync","event","size","clearTimeout","_watcherTimer","setTimeout","endsWith","watcher","trigger","_registerWorker","all","map","workerHandle","workerApi","watch","Watcher","Set","add","unsubscribe","getEventsSince","snapshot","len","Number","ignore","filter","some","i","writeSnapshot","fileNames","fromDir","moduleName","filePaths","code","message","captureStackTrace","reading","bytesRead","_read","then","byteLength","err","emitClose","autoDestroy","Buffer","alloc","_write","chunk","callback","c","_final","catch","S_IFREG","S_IFDIR","Entry","now","Date","atime","mtime","ctime","birthtime","access","modify","getSize","Stat","dev","ino","nlink","uid","gid","rdev","blksize","blocks","atimeMs","mtimeMs","ctimeMs","birthtimeMs","Boolean","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket","shared","handleFn","methodName","version","module","exports","JSON","basename","moduleDir","pathRoot","fileName","method","writable","readable","readSync","checkExists","OverlayFS","Array","writableSubscription","readableSubscription","writableEvents","readableEvents"],"version":3,"file":"browser.js.map"}